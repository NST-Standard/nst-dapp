import Head from "next/head"
import {
  Box,
  Button,
  Card,
  CardBody,
  Container,
  Heading,
  Text,
} from "@chakra-ui/react"
import jsonContracts from "./contracts.json"

import { useAccount, useConnect, useDisconnect } from "wagmi"
import { MetaMaskConnector } from "@wagmi/core/connectors/metaMask"
import { getContract } from "@wagmi/core"
import { useEffect, useState } from "react"
import { fetchSigner } from "@wagmi/core"
import { Contract, Event as EtherEvent } from "ethers"

type Contracts = {
  smokeBond: null | Contract
  supportTicket: null | Contract
  gardenTicket: null | Contract
}

const Home = () => {
  const { address, isConnected } = useAccount()
  const { connect } = useConnect({ connector: new MetaMaskConnector() })
  const { disconnect } = useDisconnect()

  const [contracts, setContracts] = useState({} as Contracts)
  const [inventory, setInventory] = useState<EtherEvent[]>([])

  // FETCH CONTRACT
  useEffect(() => {
    ;(async () => {
      const signer = await fetchSigner()
      if (signer) {
        let _contracts = {} as Contracts

        _contracts.smokeBond = getContract({
          address: jsonContracts.smokeBond,
          abi: jsonContracts.abi,
          signerOrProvider: signer,
        })

        _contracts.supportTicket = getContract({
          address: jsonContracts.supportTicket,
          abi: jsonContracts.abi,
          signerOrProvider: signer,
        })

        _contracts.gardenTicket = getContract({
          address: jsonContracts.garderTicket,
          abi: jsonContracts.abi,
          signerOrProvider: signer,
        })

        setContracts(_contracts)
      }
    })()
  }, [isConnected])

  // FETCH INVENTORY
  useEffect(() => {
    ;(async () => {
      if (
        contracts.smokeBond &&
        contracts.supportTicket &&
        contracts.gardenTicket
      ) {
        const transferFilter = contracts.smokeBond.filters.Transfer(
          null, // from
          address // to
        )
        let inventory: EtherEvent[] = []
        inventory = inventory.concat(
          await contracts.smokeBond.queryFilter(transferFilter),
          await contracts.supportTicket.queryFilter(transferFilter),
          await contracts.gardenTicket.queryFilter(transferFilter)
        )
        setInventory(inventory)
      }
    })()
  }, [contracts, address])

  return (
    <>
      <Head>
        <title>NST dApp</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Box as="main">
        <Container fontFamily="monospace" maxW="container.xl">
          <Heading as="h1" fontFamily="monospace" textAlign="center" p="5">
            NST dApp
          </Heading>

          {/* ACCOUNT */}
          <Heading py="5" fontFamily="monospace" as="h2">
            Account details
          </Heading>
          {isConnected ? (
            <>
              <Text>Connected with {address}</Text>
              <Button onClick={() => disconnect()} colorScheme="twitter">
                Disconnect
              </Button>
            </>
          ) : (
            <>
              <Button onClick={() => connect()} colorScheme="twitter">
                Connect wallet
              </Button>
            </>
          )}

          {/* NST BALANCES */}
          <Heading py="5" as="h2" fontFamily="monospace">
            NSTs balances
          </Heading>
          <Box display="flex">
            {inventory.map((item: EtherEvent) => {
              return (
                <Card m="3" key={item.address + item.blockHash}>
                  <CardBody>
                    <Text>Contract: {item.address}</Text>

                    {item.args ? (
                      <Text>TokenId: {item.args[2].toNumber()}</Text>
                    ) : (
                      ""
                    )}
                  </CardBody>
                </Card>
              )
            })}
          </Box>
        </Container>
      </Box>
    </>
  )
}

export default Home
